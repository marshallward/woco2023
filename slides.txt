==========================
The MOM6 Development Cycle
==========================

:author: Marshall Ward
:description: How the MOM6 development cycle ensures correctness and reproducibility
:date: 2023-11-09
:url: https://marshallward.org/woco2023/slides.html
:preface:
   TODO


MOM6 Ocean Model
================

TODO


MOM6 sensitivity
================

TODO (2-layer with SP restarts)

Reproducibility requires strict handling of floating point computation

Reproducibility Rules
=====================

Code management
   Changes to code do not disrupt existing work

Regression and invariance testing
   Canonical runs remain bit reproducible

Rules for Reproducibility
   Follow ... (blabla)


What we *Don't* require
-----------------------

When can answers differ?

* Hardware (Intel, AMD, A64FX, ...)

* Compilers (``gcc``, ``ifort``, ...)

* Libraries (``libm.a``)

.. TODO others?

But we still maximize reproducibility over these.

.. (Come back to this at the end...)


MOM6 Consortium
===============

.. image:: img/consortium.svg
   :width: 80%


What is the MOM6 Consortium?
----------------------------

.. list-table::
   :widths: 50 50

   - * .. image:: img/consortium.svg

     * Codebase is governed by a consortium of research groups.

       Groups manage their own branch, and contribute to ``main``.

       Individuals contribute to their group's branch.


Code Continuity
===============

.. list-table::
   :widths: 40 60

   - * .. image:: img/git_nodes_dev.svg

     * - Member's commits and branches are preserved

       - **NO** answer changes without consent

       Members can work from existing codebases with latest features and fixes.


Git Review: Fast Forward
------------------------

.. list-table::
   :widths: 50 50

   - * .. image:: img/git_ff.svg

       ``git merge``

     * .. image:: img/git_no_ff.svg

       ``git merge --no-ff``

Merge commits (``--no-ff``) support history preservation.


GFDL PR life Cycle
==================

1. User submission to node

2. Automated (CI) testing

   Currently, incoherent mash of unit and integrated testing

3. Node review

4. Validation by regression testing

   - Explain in detail

5. Rebase into node


Regression Testing
==================

Global energy at full precision

.. code:: mathematica

  Step   Days   Energy/Mass [m2 s-2]     Mean Sea Level [m]   ...

     0   0.00   7.2161166068132286E-27   1.8190E-12           ...
    12   0.50   2.7781004671136538E-04   1.1369E-12           ...
    24   1.00   2.7734897826598717E-04   1.8190E-12           ...

Differences are flagged as regressions.


Floating Point Review
---------------------

.. image:: img/ieee_float_fmt.svg
   :target: https://commons.wikimedia.org/wiki/File:Float_example.svg

.. math::

   \phi = (-1)^{\color{yellow} s} \times 2^{\color{aquamarine} M}
      \times (1 + {\color{pink} \alpha})

* Smallest fractional diff:
  :math:`\color{yellow}2^{-52} \approx 2.2 \times 10^{-16}`

* 17 digits to uniquely specify a result


Diagnostic Reproducibility
==========================

.. code:: mathematica

     u-point: ocean_model-u
       min  = -6.7187595818683776E-03  max  =  3.3480219779204019E-02
       mean =  1.1239682303793666E-04  bits = 21851
     v-point: ocean_model-v
       min  = -8.3469699425156359E-03  max  =  6.8420831486068704E-03
       mean =  1.2076392816784489E-03  bits = 18606
     h-point: ocean_model-h
       min  =  9.9999999999999915E-04  max  =  5.6265092225099863E+02
       mean =  3.6490088139048595E+02  bits = 18673
     ...


History management
==================

Rules of history management:

1. We **preserve** history of partners ("across nodes")

2. We **rewrite** history of contributors ("within nodes")


Tangled History
===============

.. image:: img/git_branchy.svg

Difficult to test


Sacred Timeline
===============

.. image:: img/git_rebased.svg


Why preserve history
====================

1. Preserve development activity of nodes, especially hashes for ongoing runs

2. Allow *cross-node* activity, e.g. sharing commits across


Bit Reproducibility
===================

1. Explicit order of operations:

   .. math::

      (a + b) + c \neq a + (b + c)

2. No ambiguous operators::

      sum(), exp(), z**6, ...

3. High-precision summation

4. Rotation-invariant stencils






