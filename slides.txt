==========================
The MOM6 Development Cycle
==========================

:author: Marshall Ward
:organization: NOAA GFDL
:description: How the MOM6 development cycle ensures correctness and reproducibility
:date: 2023-11-09
:url: https://marshallward.org/woco2023/index.html
:preface:


MOM6 Ocean Model
================

.. figure:: media/mom6_relvort.mp4

.. notes::

   * Showcase what the model can do

   * Diverse range of length and time scales

   * Even more too slow to see

      * Overturning (yrs, decades, ...)

   * Responsibility is to replicate this flow


MOM6 sensitivity
================

.. figure:: media/twolayer.mp4

Minor deviation leads to :math:`O(1)` difference

.. notes::

   * Replication is a major challenge

   * Simple two-layer configuration

   * Identical start, saved in double and single precision

   * A single bit can cause similar deviations

   * Both scientific and software challenges


Reproducibility Rules
=====================

* Numerical expressions must be *bit-reproducible*

* Code must not change existing solutions

* Changes must not disrupt existing research

.. notes::

   How to navigate this issue?

   * Regression testing requires reproducibility

   * Forecasters require reproducible output

   * Researchers want latest features without answer changes


What we *Don't* require
-----------------------

When can answers differ?

* Aggressive optimization (``-O3 -mavx ...``)

* Hardware (Intel, AMD, A64FX, ...)

* Compilers (``gcc``, ``ifort``, ...)

* Libraries (``libm.a``, ...)

.. TODO others?

But we still try to maximize reproducibility.

.. (Come back to this at the end...)


..

   Bit Reproducibility
   ===================

   1. Ambiguous ordering is rejected:

      .. math::

         x + y + z

   2. No ambiguous functions::

         sin(), exp(), z**6, ...

   3. Use ``reproducing_sum()`` for global metrics


   .. notes::

      On the same note, no ``matmul()``


Float Order-of-Operations
=========================

What is :math:`10^{-16} + 1 - 1`?  Ambiguous!

.. math::

   (10^{-16} + 1) - 1 &\equiv 0 \\
   10^{-16} + (1 - 1) &= 10^{-16}

Residuals below ULP :math:`\left(2 \times 10^{-16}\right)` are lost.

*Use parentheses to set the order of operations*

.. notes::

   * Without parentheses, compilers can reorder

      * Perhaps for a good reason!  But come back to that... (or not?)

   * Scientifically, we may need a particular order!

   * Must use language that respects parentheses

   ULP: Unit of least precision (or lowest bit)

   10^-16 is below the current ULP (2x10^-16), so is lost in the first example.

   Cancellation in the second summation shifts ULP, preserving 10^-16.


Transcendentals
===============

How is ``sin(x)`` computed?  Ambiguous!

.. math::

   f(48^\circ) = 2 \Omega \sin \left( \frac{48 \pi}{180} \right)

.. code:: mathematica

   glibc 2.22: 0.108381727637274115E-03 (3F1C695FE71A3FE4)
         2.26: 0.108381727637274128E-03 (3F1C695FE71A3FE5)

*Avoid transcendentals where possible, manage dependencies when
necessary.*

.. notes::

   * Rarely possible to identify the origin of such functions

      * External library? (``libm``)

      * Runtime?

   * Sometimes unavoidable, but strictly speaking they should not be used

   * Note that the power operator ``a**b`` falls under this category!


Global Summation
================

The order of ``sum()`` is ambiguous!

Parentheses work, but may have cumulant errors:

.. math::

   \sum{\phi} = \phi_1 + (\phi_2 + ( \phi_3 + ... ))

Sums are stored in fixed-precision using six integers:

.. image:: img/fixedprec.svg
   :width: 80%
   :target: https://doi.org/10.1016/j.parco.2014.04.007

.. notes::

   Parentheses are OK for cumulant sums, but there are problems:

   - Must gather to one rank/thread before summing

   - Cumulant errors depend on order, threaten accuracy

   Cumulant sums over multiple bins resolve these issues.

   * Importance of these will be clear in next couple of slides

   ----

   Hallberg and Adcroft, 2014: An Order-invariant Real-to-Integer Conversion
   Sum.  Parallel Computing, 40(5-6), DOI:10.1016/j.parco.2014.04.007

   Alistair says:

   Many people are aware that those last digits we write out vary depending on
   the order of summation. Not so for us which is why we can use it as a metric
   for detecting regression.

   Bob says:

   With the global reproducing sums, we are able to get identical values to
   roundoff compared with the single largest value in the sum, rather than
   roundoff compared with the sum itself.  For an ocean model on a 1000x1000
   grid, we are routinely able to detect global non-conservation that is larger
   than about 1 part in 10^20.


GFDL PR life Cycle
==================

.. image:: img/life_cycle.svg


1. User submits to node by PR

2. Automated verification testing

3. Code review (by a human)

4. Test for regressions on production machine

5. Rebase into node codebase


Verification Testing
====================

.. image:: img/mom_verify.svg

CI testing is *platform independent*

.. notes::

   * Sketch of how our CI verifies code contributions

   * Use "verification" in the Barry Boehm "Verification and Validation"
     sense...

   * Executable is compiled in various modes

      * compile-time grid, code coverage, etc

   * Run "micro-tests" based on larger configs

   * Each test subject to a variety of **invariance** tests


State of the Model
==================

Global energy tracked to full precision

.. code:: mathematica

  Step   Days   Energy/Mass [m2 s-2]     Mean Sea Level [m]   ...

     0   0.00   7.2161166068132286E-27   1.8190E-12           ...
    12   0.50   2.7781004671136538E-04   1.1369E-12           ...
    24   1.00   2.7734897826598717E-04   1.8190E-12           ...

Diagnostics use multiple metrics

.. code:: mathematica

     u-point: ocean_model-u
       min  = -6.7187595818683776E-03  max  =  3.3480219779204019E-02
       mean =  1.1239682303793666E-04  bits = 21851
     v-point: ocean_model-v
       min  = -8.3469699425156359E-03  max  =  6.8420831486068704E-03
       mean =  1.2076392816784489E-03  bits = 18606
     h-point: ocean_model-h
       min  =  9.9999999999999915E-04  max  =  5.6265092225099863E+02
       mean =  3.6490088139048595E+02  bits = 18673
     ...

.. notes::

   * bit-reproducible summation allow for global metrics

   * The CI checks *every diagnostic*

   * Using min/max/mean + bitcount catches just about any error you can imagine

      * min/max help catch values below ULP

         * more min than max!

      * bitcount further catches diffs


Example Tests
=============

"Local regression"
   New code does not (inadvertently) change answers

Parallel Layout
   1 × 2 and 2 × 1 domain decomponsitions

Restart/Pickup
   One :math:`\Delta t` run must equal two :math:`\tfrac{1}{2}\Delta t` runs

Aggressive initialization
   NaN-initialization arrays vs. uninitialized arrays

.. notes::

   Other tests include

   * OpenMP (single thread)

   * Symmetric/nonsymmetric grid

   * Production ("REPRO") optimization

      * Meant to match our "DEBUG" build


Dimension Test
==============

Dimensionally correct equations are invariant to scaling:

.. math::

   u^{n+1} &= u^{n} +  \Delta t \times \mathcal{F} \\
   \color{yellow}{2^{L-T}} u^{n+1} &= \color{yellow}{2^{L-T}} u^{n}
      + \color{yellow}{2^T} \Delta t
      \times \color{yellow}{2^{L - 2T}} \mathcal{F}

Solutions should also be invariant, e.g. :math:`L \rightarrow 2^N L`

.. notes::

   * Unique(?) testing feature

   * Relies on the factor-of-two reproducibility of the model

   * By L -> 2^N L, I mean:

      * Scale


Floating Point Review
---------------------

.. image:: img/ieee_float_fmt.svg
   :target: https://commons.wikimedia.org/wiki/File:Float_example.svg

.. math::

   \phi = (-1)^{\color{yellow} s} \times 2^{\color{aquamarine} M}
      \times (1 + {\color{pink} \alpha})

* Smallest fractional diff:
  :math:`\color{yellow}{2^{-52} \approx 2.2 \times 10^{-16}}`

* 17 digits to uniquely specify a result


Shallow Water Example
---------------------

.. math::

      u_t + u u_x + v u_y &= -g h_x \\
      v_t + u v_x + v v_y &= -g h_y \\
      h_t + h u_x + h v_y &= 0 \\

.. list-table::

   * - Dimensions:
       * :math:`L` (horiz. length)
       * :math:`T` (time)
       * :math:`H` (layer depth)

     - Invariants:
       * :math:`\left[ u, v \right] = L T^{-1}`
       * :math:`\left[ g \right] = L^2 H^{-1} T^{-2}`


Rotation Test
=============

Equations should be invariant to rotation

.. list-table::
   :widths: 25 25 25 25

   * - .. image:: media/orig.png

     - .. image:: img/rotate_grid1.svg

     - .. image:: media/rotate.png

     - .. image:: img/rotate_grid2.svg

Perhaps should be called an "index" rotation

.. image:: img/rotate_mem.svg
          :width: 65%

.. notes::

   * Caveat that we have to rotate *everything* (grids, fields, etc)

   * Again, bit reproducibility makes this possible


Invariant stencils
------------------

:math:`\phi^{(c)}_{i,j} = \frac{1}{4} (\phi_A + \phi_B + \phi_C + \phi_D)`

.. list-table::

   * - .. image:: img/stencil1.svg

     - :math:`\frac{1}{4} (
            ({\color{LightCoral}{\phi_A}} + {\color{LightCoral}{\phi_B}})
            + ({\color{LightSkyBlue}{\phi_C}} + {\color{LightSkyBlue}{\phi_D}})
       )`

       :math:`\frac{1}{4} (
            ({\color{LightCoral}{\phi_A}} + {\color{LightSkyBlue}{\phi_C}})
            + ({\color{LightCoral}{\phi_B}} + {\color{LightSkyBlue}{\phi_D}})
       )`

   * - .. image:: img/stencil2.svg

     - :math:`\frac{1}{4} (
            ({\color{LightCoral}{\phi_A + \phi_D}})
            + ({\color{LightSkyBlue}{\phi_B + \phi_C}})
       )`

.. notes::

   Example: Interpolation from vertex to center point

   The ideal outcome is to construct the stencil in a rotationally invariant
   form.

   The first example will evaluate its terms in a different order after a
   quarter turn.

   The second form is rotationally invariant to any number of quarter turns.


Descriptive Commits
===================

.. include:: src/git.log
   :code: txt

Also: *No "fixed my typo" commits!*

.. notes::

   * Code is the "how"

   * Commits are the "why"

   * long-form commits are required

   * Reality?  We do a lot of squashing and rebasing


----

.. list-table::
   :widths: 45 55

   * - .. image:: media/linus_and_dirk.png

     -

         Commit messages to me are almost as important as the code change
         itself.

         If you can explain the code change to me, I will trust the code.

Linus Torvalds, Linux OSS 2020

.. notes::

   https://www.youtube.com/watch?v=H8Gd9t7FQqI


Regression Suite
================

.. image:: img/mom6_reg_suite.svg

Validate 61 tests using 3 compilers

.. notes::

   * Three compilers (GNU, Intel, Nvidia)

   * Test from idealized (2d, column, ...) to production (OM4)

   * Requires our production machine!

      * (up to 480 cores)


Tangled History
===============

.. list-table::
   :widths: 45 55

   * - .. image:: img/git_branchy.svg

     - Having many active users leads to a non-sequential history

       This severely complicates our ability to track bugs and regressions!


Rewrite History!
================

.. list-table::
   :widths: 35 65

   * - .. image:: img/git_rebased.svg

     - We aggressively rebase to create a new linear history

       However, note that we also clobber user history

       We *cannot* clobber external research codebase!

       How to preserve existing runs?

.. notes::

   * Clobbering user history causes some internal frustration!


MOM6 Consortium
===============

.. image:: img/consortium.svg
   :width: 75%


What is the MOM6 Consortium?
----------------------------

.. list-table::
   :widths: 50 50

   - * .. image:: img/consortium.svg

     * Codebase is governed by a consortium of research groups.

       All changes to the "hub" must be tracked and preserved.

       Groups manage their own branch, and contribute to ``main``.


Code Continuity
===============

.. list-table::
   :widths: 40 60

   - * .. image:: img/git_nodes_dev.svg

     * - Merges to ``main`` are **unanimous**

       - All branches within a node are preserved

       - Nodes can easily collaborate on joint projects

..

   The following slide is a bit too pedantic or "in the weeds" for this stage
   of the talk.

   Git Review: Fast Forward
   ------------------------

   .. list-table::
      :widths: 50 50

      - * .. image:: img/git_ff.svg

          ``git merge``

        * .. image:: img/git_no_ff.svg

          ``git merge --no-ff``

   Merge commits (``--no-ff``) support history preservation.


Summary
=======

Bit reproducibility?
   Restrict model to *non-ambiguous* operations

Preserve existing solutions?
   *Regression* and *self-consistency* testing

Code preservation?
   Mutual governance by a *consortium* of groups
